{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","App.module.css","redux/contacts-actions.js","redux/contacts-reducer.js","redux/store.js","redux/contacts-operations.js","components/ContactForm/ContactForm.js","redux/contacts-selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","items","createReducer","_","payload","state","some","contact","name","toLowerCase","alert","filter","id","loading","error","combineReducers","store","configureStore","reducer","contacts","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","axios","defaults","baseURL","connect","dispatch","onSubmit","data","text","a","post","useState","setName","number","setNumber","handleChange","e","currentTarget","value","reset","className","s","form","preventDefault","label","type","pattern","title","required","onChange","button","getFilter","getVisibleContacts","createSelector","allContacts","normalizedFilter","includes","handleClick","contactId","delete","fetchContacts","get","useEffect","list","map","btn","onClick","target","input","App","container","console","log","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df5f84d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__e5wK1\",\"label\":\"ContactForm_label__1B6s-\",\"button\":\"ContactForm_button__3PJVE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2QZ8L\",\"btn\":\"ContactList_btn__3o-fJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1Pwhz\",\"input\":\"Filter_input__2J8-l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3ajtk\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst fetchContactRequest = createAction('contacts/fetchContactRequest');\nconst fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nconst fetchContactError = createAction('contacts/fetchContactError');\n\nconst addContactRequest = createAction('contacts/addContactRequest');\nconst addContactSuccess = createAction('contacts/addContactSuccess');\nconst addContactError = createAction('contacts/addContactError');\n\nconst removeContactRequest = createAction('contacts/removeContactRequest');\nconst removeContactSuccess = createAction('contacts/removeContactSuccess');\nconst removeContactError = createAction('contacts/removeContactError');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n  changeFilter,\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n  changeFilter,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => {\n    const existContact = state.some(\n      contact => contact.name.toLowerCase() === payload.name.toLowerCase(),\n    );\n\n    if (existContact) {\n      alert(`${payload.name} is already in contacts.`);\n      return;\n    }\n    return [...state, payload];\n  },\n  [removeContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [removeContactRequest]: () => true,\n  [removeContactSuccess]: () => false,\n  [removeContactError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContactError]: (_, { payload }) => payload,\n  [addContactError]: (_, { payload }) => payload,\n  [removeContactError]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n  // persistStore,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport logger from 'redux-logger';\n\nimport contactsReducer from './contacts-reducer';\n\nconst middleware = getDefaultMiddleware =>\n  getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }).concat(logger);\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport { store };\n","import axios from 'axios';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\nconst addContact = text => async dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post('/contacts', text);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst removeContact = contactId => async dispatch => {\r\n  dispatch(removeContactRequest());\r\n\r\n  try {\r\n    await axios.delete(`/contacts/${contactId}`);\r\n    dispatch(removeContactSuccess(contactId));\r\n  } catch (error) {\r\n    dispatch(removeContactError(error));\r\n  }\r\n};\r\n\r\nexport { addContact, removeContact, fetchContacts };\r\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addContact } from '../../redux/contacts-operations';\n\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={onFormSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: data => dispatch(addContact(data)),\n});\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (allContacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return allContacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\n// const getVisibleContacts = state => {\r\n//   const allContacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return allContacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\nexport { getFilter, getVisibleContacts };\r\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { removeContact, fetchContacts } from '../../redux/contacts-operations';\nimport { getVisibleContacts } from '../../redux/contacts-selectors';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, handleClick, fetchContacts }) => {\n  useEffect(() => {\n    fetchContacts();\n  }, [fetchContacts]);\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <span>\n            {name}: {number}\n          </span>\n          <button\n            className={s.btn}\n            type=\"button\"\n            onClick={() => handleClick(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleClick: id => dispatch(removeContact(id)),\n  fetchContacts: () => dispatch(fetchContacts()),\n});\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string.isRequired)),\n  handleClick: PropTypes.func.isRequired,\n  fetchContacts: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts-actions';\nimport { getFilter } from '../../redux/contacts-selectors';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.label}>\n    Find contacts by name\n    <input\n      className={s.input}\n      type=\"text\"\n      name=\"name\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nimport s from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={s.container}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport { store } from './redux/store';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\n\nconsole.log(store.getState());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}